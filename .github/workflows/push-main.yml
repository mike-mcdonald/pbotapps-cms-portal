name: Push to main

on:
  push:
    branches: [main]

env:
  REPOSITORY: pbotapps.azurecr.io/cms-portal
  COMPOSER_MEMORY_LIMIT: -1

jobs:
  composer-install:
    name: "Install CMS dependencies"
    runs-on: "ubuntu-20.04"
    strategy:
      fail-fast: false
      matrix:
        php-version: ["7.4"]
        drupal-release: ["stable"]
        composer-channel: ["stable"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache composer packages
        uses: actions/cache@v2
        env:
          cache-name: cache-composer-packages
        with:
          path: |
            ./vendor
            ./web/core
            ./web/modules/contrib
            ./web/profiles/contrib
            ./web/themes/contrib
          key: composer-build-v4-${{ env.cache-name }}-${{ hashFiles('./composer.lock') }}
          restore-keys: |
            composer-build-v4-${{ env.cache-name }}-
            composer-build-v4-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: gd

      - name: Update composer
        run: composer --verbose self-update --${{ matrix.composer-channel }}

      - name: Dump composer verson
        run: composer --version

      - name: Validate composer.json
        run: composer --verbose validate

      - name: Install dependencies
        run: composer --verbose --no-dev install

  php-docker-build:
    name: "Build PHP Docker image"
    needs: composer-install
    runs-on: "ubuntu-20.04"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Make image directory
        run: mkdir -p ./.docker/images/fpm

      - name: Cache docker image
        id: docker-cache-hit
        uses: actions/cache@v2
        env:
          cache-name: cache-php-docker
        with:
          path: ./.docker/images/fpm/base.tar.gz
          key: ${{ runner.os }}-${{ env.cache-name }}-v2-${{ hashFiles('.docker/php/**') }}

      - name: Build base image
        if: ${{ !steps.docker-cache-hit.outputs.cache-hit }}
        run: |
          docker \
          build \
          -t base \
          -f ./.docker/php/Dockerfile \
          --build-arg INSTALL_COMPOSER=false \
          ./.docker/php

      - name: Save base image
        if: ${{ !steps.docker-cache-hit.outputs.cache-hit }}
        run: docker save base | gzip > ./.docker/images/fpm/base.tar.gz

      - name: Load base image
        if: ${{ steps.docker-cache-hit.outputs.cache-hit }}
        run: |
          gzip --keep -d ./.docker/images/fpm/base.tar.gz
          docker load --input ./.docker/images/fpm/base.tar

      - name: Cache composer packages
        uses: actions/cache@v2
        env:
          cache-name: cache-composer-packages
        with:
          path: |
            ./vendor
            ./web/core
            ./web/modules/contrib
            ./web/profiles/contrib
            ./web/themes/contrib
          key: composer-build-v4-${{ env.cache-name }}-${{ hashFiles('./composer.lock') }}
          restore-keys: |
            composer-build-v4-${{ env.cache-name }}-
            composer-build-v4-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4
          extensions: gd

      - name: Update composer
        run: composer --verbose self-update --stable

      - name: Install dependencies
        run: composer --verbose --no-dev install

      - name: Build full image
        run: |
          docker build \
          -t $REPOSITORY/fpm \
          -f ./.github/.docker/Dockerfile \
          --build-arg USER=www-data \
          --build-arg GROUP=www-data \
          .

      - name: Save full image
        run: docker save $REPOSITORY/fpm | gzip > ./.docker/images/fpm/full.tar.gz

      - name: Upload full image
        uses: actions/upload-artifact@v2
        with:
          name: fpm-image
          path: ./.docker/images/fpm/full.tar.gz

  nginx-docker-build:
    name: "Build CMS Nginx Docker image"
    needs: composer-install
    runs-on: "ubuntu-20.04"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Make image directory
        run: mkdir -p ./.docker/images/nginx

      - name: Cache docker image
        id: docker-cache-hit
        uses: actions/cache@v2
        env:
          cache-name: cache-nginx-docker
        with:
          path: ./.docker/images/nginx/base.tar.gz
          key: ${{ runner.os }}-${{ env.cache-name }}-v2-${{ hashFiles('.docker/nginx/**') }}

      - name: Build base image
        if: ${{ !steps.docker-cache-hit.outputs.cache-hit }}
        run: |
          docker \
          build \
          -t base \
          -f ./.docker/nginx/Dockerfile \
          ./.docker/nginx

      - name: Save base image
        if: ${{ !steps.docker-cache-hit.outputs.cache-hit }}
        run: docker save base | gzip > ./.docker/images/nginx/base.tar.gz

      - name: Load base image
        if: ${{ steps.docker-cache-hit.outputs.cache-hit }}
        run: |
          gzip --keep -d ./.docker/images/nginx/base.tar.gz
          docker load --input ./.docker/images/nginx/base.tar

      - name: Cache composer packages
        uses: actions/cache@v2
        env:
          cache-name: cache-composer-packages
        with:
          path: |
            ./vendor
            ./web/core
            ./web/modules/contrib
            ./web/profiles/contrib
            ./web/themes/contrib
          key: composer-build-v4-${{ env.cache-name }}-${{ hashFiles('./composer.lock') }}
          restore-keys: |
            composer-build-v4-${{ env.cache-name }}-
            composer-build-v4-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4
          extensions: gd

      - name: Update composer
        run: composer --verbose self-update --stable

      - name: Install dependencies
        run: composer --verbose --no-dev install

      - name: Build full image
        run: |
          docker build \
          -t $REPOSITORY/nginx \
          -f ./.github/.docker/Dockerfile \
          --build-arg USER=root \
          --build-arg GROUP=nginx \
          .

      - name: Save full image
        run: docker save $REPOSITORY/nginx | gzip > ./.docker/images/nginx/full.tar.gz

      - name: Upload full image
        uses: actions/upload-artifact@v2
        with:
          name: nginx-image
          path: ./.docker/images/nginx/full.tar.gz

  push-images:
    name: "Push Docker images"
    needs:
      - php-docker-build
      - nginx-docker-build
    runs-on: "ubuntu-20.04"
    strategy:
      matrix:
        image: ["nginx", "fpm"]
    steps:
      - name: Login via Az module
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        env:
          ACR_NAME: ${{ secrets.ACR_NAME }}
        run: az acr login --name $ACR_NAME

      - name: Download full image
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.image }}-image
          path: ./.docker/images/${{ matrix.image }}

      - name: Load image
        run: |
          gzip -d ./.docker/images/${{ matrix.image }}/full.tar.gz
          docker load --input ./.docker/images/${{ matrix.image }}/full.tar

      - name: Tag image
        run: docker tag $REPOSITORY/${{ matrix.image }} $REPOSITORY/${{ matrix.image }}:main

      - name: Push images to repository
        run: docker push $REPOSITORY/${{ matrix.image }}:main

  deploy:
    name: Deploy Helm upgrade on test namespace
    needs:
      - push-images
    runs-on: ubuntu-latest
    env:
      K8S_CLUSTER_NAME: ${{ secrets.K8S_CLUSTER_NAME }}
      K8S_CLUSTER_RG: ${{ secrets.K8S_CLUSTER_RG }}
      K8S_NAMESPACE: test
      RELEASE_NAME: ${{ secrets.HELM_RELEASE_NAME }}-test
    steps:
      - uses: actions/checkout@v2
      - name: Create Kubernetes secrets
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          OAUTH_PRIVATE_KEY: ${{ secrets.OAUTH_PRIVATE_KEY }}
          OAUTH_PUBLIC_KEY: ${{ secrets.OAUTH_PUBLIC_KEY }}
        run: |
          mkdir -p chart/.secret
          echo -n "$AZURE_CLIENT_ID" > chart/.secret/AZURE_CLIENT_ID
          echo -n "$AZURE_CLIENT_SECRET" > chart/.secret/AZURE_CLIENT_SECRET
          echo -n "$DATABASE_PASSWORD" > chart/.secret/DATABASE_PASSWORD
          echo -n "$OAUTH_PRIVATE_KEY" > chart/.secret/private.key
          echo -n "$OAUTH_PUBLIC_KEY" > chart/.secret/public.key
      - uses: azure/setup-kubectl@v1
      - uses: azure/setup-helm@v1
      - name: Login via Az module
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Log in to AKS
        run: az aks get-credentials --name $K8S_CLUSTER_NAME --resource-group $K8S_CLUSTER_RG
      - name: Deploy release
        run: |
          helm \
          upgrade \
          --namespace $K8S_NAMESPACE \
          --install \
          $RELEASE_NAME \
          chart/ \
          -f chart/values-test.yaml

  refresh:
    name: Refresh pods on test namespace
    needs:
      - deploy
    runs-on: ubuntu-latest
    env:
      K8S_CLUSTER_NAME: ${{ secrets.K8S_CLUSTER_NAME }}
      K8S_CLUSTER_RG: ${{ secrets.K8S_CLUSTER_RG }}
      K8S_NAMESPACE: test
      RELEASE_NAME: ${{ secrets.HELM_RELEASE_NAME }}-test
    steps:
      - uses: actions/checkout@v2
      - uses: azure/setup-kubectl@v1
      - name: Login via Az module
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Log in to AKS
        run: az aks get-credentials --name $K8S_CLUSTER_NAME --resource-group $K8S_CLUSTER_RG
      - name: Refresh release
        run: |
          kubectl \
          --namespace=$K8S_NAMESPACE \
          delete \
          pod \
          -l app.kubernetes.io/instance=$RELEASE_NAME
